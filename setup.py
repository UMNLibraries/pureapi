# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pureapi']

package_data = \
{'': ['*'], 'pureapi': ['schemas/517/*', 'schemas/518/*']}

install_requires = \
['addict', 'attrs>=19.3.0,<20.0.0', 'requests>=2.20.0,<3.0.0', 'tenacity']

setup_kwargs = {
    'name': 'pureapi',
    'version': '4.1.1',
    'description': "Tools for working with Elsevier's Pure API.",
    'long_description': '# pureapi\n\nTools for working with Elsevier\'s Pure API.\n\n## Quick Start\n\nIf you set the `PURE_API_DOMAIN` and `PURE_API_KEY` environment variables,\nand want to use the latest Pure API version, using this package\'s client\ncan be as easy as:\n\n```python\nfrom pureapi import client\nresponse = client.get(\'research-outputs\')\n```\n\nFor more control, pass a `client.Config` object. For example, to make requests\nto two different Pure API servers:\n\n```python\nfrom pureapi.client import Config\nresponse = client.get(\n    \'persons\',\n    config=Config(domain=\'example.com\', key=\'123-abc\')\n)\ntest_repsonse = client.get(\n    \'persons\',\n    config=Config(domain=\'test.example.com\', key=\'456-def\', version=\'518\')\n)\n```\n\nAll functions that make requests of a Pure API server accept a `config`\nparameter. See the documentation for `client.Config` for more details.\n\n### Multi-Request Functions\n\nMany collections may contain too many records to download in a single request.\nFor downloading large numbers of records in multiple requests, use the\n`client.*_all*()` functions. For example, to download all research outputs:\n\n```python\nfor response in client.get_all(\'research-outputs\'):\n   json = response.json()\n```\n\n### Record-Transforming Functions\n\nFor even more convenience, each `client.*_all()` function has an associated\n`*_all_transformed()` function. Instead of yielding HTTP responses, which\ntypicall contain many records each,these functions yield individual records,\ntransformed from raw JSON into `addict.Dict` objects. These transformed records\nallow easier access to deeply nested fields, and may also ensure that some\ncritical fields exist in each record, even if they may be `None` or empty by\ndefault.\n\nAn example using one of these functions to get the titles of all research\noutputs:\n\n```python\nfor ro in client.get_all_transformed(\'research-outputs\'):\n   title = ro.title.value\n```\n\nFor more details, see the documentation for each module. For more examples, see\n`tests/test_*.py`.\n\n## Pure API Versions\n\nSuccessfully tested against Pure API versions 5.16.x - 5.18.x.\n\n## Requirements and Recommendations\n\n### Python Versions\n\npureapi requires Python >= 3.\n\n### Pure API Domain and Key\n\nThe only configuration values the user absolutely must provide are a Pure API\ndomain and key. There are a couple of ways to do this:\n* `client.Config` object\n* `PURE_API_DOMAIN` and `PURE_API_KEY` environment variables\n\nRunning `pytest --integration tests/test_client.py` requires the environment\nvariables. One to set them is with a `.env` file. See `env.dist` for an example.\n\n### pyenv, venv, and poetry\n\nTo install and manage Python versions we use [pyenv](https://github.com/pyenv/pyenv), and to manage\ndependencies we use [poetry](https://poetry.eustace.io/). While alternative tools will work, we document\nhere only the tools we use. We will document the use of other tools if demand arises.\n\nOne way to set up all these tools to work together, for a new project, is to follow the workflow below.\nNote that we prefer to put virtual environments inside the project directory. Note also that we use the\nbuilt-in `venv` module to create virtual environments, and we name their directories `.venv`, because\nthat is what `poetry` does and expects.\n\n* Install pyenv.\n* `pyenv install $python_version`\n* `mkdir $project_dir; cd $project_dir`\n* Create a `.python-version` file, containing `$python_version`.\n* `pip install poetry`\n* `poetry config settings.virtualenvs.in-project true`\n* `python -m venv ./.venv/`\n* `source ./.venv/bin/activate`\n\nNow running commands like `poetry install` or `poetry update` should install packages into the virtual\nenvironment in `./.venv`. Don\'t forget to `deactivate` the virtual environment when finished using it.\nIf the project virtual environment is not activated, `poetry run` and `poetry shell` will activate it.\nWhen using `poetry shell`, exit the shell to deactivate the virtual environment.\n\n## Installing\n\nAdd to `pyproject.toml`:\n\n```\npureapi = {git = "git://github.com/UMNLibraries/pureapi.git"}\n```\n\nTo specify a version, include the `tag` parameter:\n\n```\npureapi = {git = "git://github.com/UMNLibraries/pureapi.git", tag = "1.0.0"}\n```\n\nTo install, run `poetry install`.\n\n## Testing\n\nRun the following, either as arguments\nto `poetry run`, or after running `poetry shell`:\n\n```\npytest tests/test_client.py\npytest tests/test_common.py\npytest tests/test_response.py\n```\n\nOr to run all tests: `pytest`\n\nNote that `tests/test_client.py` includes integration tests that make requests\nagainst a Pure API server. To run those tests, pass the `--integration` option\nto pytest, and set the environment variables described in\n[Requirements and Recommendations](#requirements-and-recommendations).\n\n## Contributing\n\n### Google-Style Docstrings\n\nWe use [Google-style docstrings](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings).\nThe [Napoleon extension for Sphinx](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/index.html)\nhas some [good examples](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google).\n\n### Include an updated `setup.py`.\n\nPython package managers, including poetry, will be unable to install a VCS-based package without a\n`setup.py` file in the project root. To generate `setup.py`:\n\n```\npoetry build\ntar -zxf dist/pureapi-1.0.0.tar.gz pureapi-1.0.0/setup.py --strip-components 1\n```\n\n### Do not commit `pyproject.lock`.\n\nTo allow for flexibility in dependency versions, do _not_ commit `pyproject.lock`.\nIf multiple developers encounter problems with conflicting dependency versions, we may\nconsider committing `pyproject.lock` at that point.\n',
    'author': 'David Naughton',
    'author_email': 'naughton@umn.edu',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.3,<4.0.0',
}


setup(**setup_kwargs)
